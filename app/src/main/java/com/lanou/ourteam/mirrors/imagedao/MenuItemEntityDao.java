package com.lanou.ourteam.mirrors.imagedao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.lanou.ourteam.mirrors.imagedao.MenuItemEntity;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "MENU_ITEM_ENTITY".
*/
public class MenuItemEntityDao extends AbstractDao<MenuItemEntity, Long> {

    public static final String TABLENAME = "MENU_ITEM_ENTITY";

    /**
     * Properties of entity MenuItemEntity.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Title = new Property(1, String.class, "title", false, "TITLE");
        public final static Property TopColor = new Property(2, String.class, "topColor", false, "TOP_COLOR");
        public final static Property ButtomColor = new Property(3, String.class, "buttomColor", false, "BUTTOM_COLOR");
        public final static Property Type = new Property(4, String.class, "type", false, "TYPE");
        public final static Property Info_data = new Property(5, String.class, "info_data", false, "INFO_DATA");
        public final static Property Store = new Property(6, String.class, "store", false, "STORE");
    };


    public MenuItemEntityDao(DaoConfig config) {
        super(config);
    }
    
    public MenuItemEntityDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"MENU_ITEM_ENTITY\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"TITLE\" TEXT," + // 1: title
                "\"TOP_COLOR\" TEXT," + // 2: topColor
                "\"BUTTOM_COLOR\" TEXT," + // 3: buttomColor
                "\"TYPE\" TEXT," + // 4: type
                "\"INFO_DATA\" TEXT," + // 5: info_data
                "\"STORE\" TEXT);"); // 6: store
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"MENU_ITEM_ENTITY\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, MenuItemEntity entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(2, title);
        }
 
        String topColor = entity.getTopColor();
        if (topColor != null) {
            stmt.bindString(3, topColor);
        }
 
        String buttomColor = entity.getButtomColor();
        if (buttomColor != null) {
            stmt.bindString(4, buttomColor);
        }
 
        String type = entity.getType();
        if (type != null) {
            stmt.bindString(5, type);
        }
 
        String info_data = entity.getInfo_data();
        if (info_data != null) {
            stmt.bindString(6, info_data);
        }
 
        String store = entity.getStore();
        if (store != null) {
            stmt.bindString(7, store);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public MenuItemEntity readEntity(Cursor cursor, int offset) {
        MenuItemEntity entity = new MenuItemEntity( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // title
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // topColor
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // buttomColor
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // type
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // info_data
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6) // store
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, MenuItemEntity entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setTitle(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setTopColor(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setButtomColor(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setType(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setInfo_data(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setStore(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(MenuItemEntity entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(MenuItemEntity entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
